// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "proxgpu_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// solve_path
Rcpp::List solve_path(const Rcpp::List& X_list, const Rcpp::List& censoring_list, MatrixXd B, const Rcpp::List& rankmin_list, const Rcpp::List& rankmax_list, double step_size, VectorXd lambda_1_all, VectorXd lambda_2_all, Eigen::RowVectorXd penalty_factor, int niter, double linesearch_beta, double eps, double tol);
RcppExport SEXP _proxgpu_solve_path(SEXP X_listSEXP, SEXP censoring_listSEXP, SEXP BSEXP, SEXP rankmin_listSEXP, SEXP rankmax_listSEXP, SEXP step_sizeSEXP, SEXP lambda_1_allSEXP, SEXP lambda_2_allSEXP, SEXP penalty_factorSEXP, SEXP niterSEXP, SEXP linesearch_betaSEXP, SEXP epsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type censoring_list(censoring_listSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type rankmin_list(rankmin_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type rankmax_list(rankmax_listSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type lambda_1_all(lambda_1_allSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type lambda_2_all(lambda_2_allSEXP);
    Rcpp::traits::input_parameter< Eigen::RowVectorXd >::type penalty_factor(penalty_factorSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type linesearch_beta(linesearch_betaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_path(X_list, censoring_list, B, rankmin_list, rankmax_list, step_size, lambda_1_all, lambda_2_all, penalty_factor, niter, linesearch_beta, eps, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_proxgpu_solve_path", (DL_FUNC) &_proxgpu_solve_path, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_proxgpu(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
